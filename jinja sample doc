key : valueType

id : String
name : String
is_channel : Bool
created : int
creator : String
...

Example generated code:

struct Channel {
	let id : String? = nil;
	let name : String? = nil;
	let is_channel : Bool? = nil;
	let created : Int? = nil;
	let creator : String? = nil;
	... etc.

	//populate struct from received data
	func packChannelObject(jsonData : NSData){
		jsonObject = JSON.parse(jsonData);
		id = jsonObject?["id"].String;
		name = jsonOjbect?["name"].String;
		is_channel = jsonObject?["is_channel"].Bool
		.... etc.
	}

	//This one is tricky, since our fields are optionals, but nil values are not allowed in a dictionary
	//we can ofcourse write conditional for each member, but that is not elegant.
	//could use generics to write an encode function

	encode<T>(String key,T objToEncode){
		if(objToEncode != nil){
			jsonDict[key] = objToEncode
		} else {
			return;
		}
	}

	//create NSData object containing JSON representation of struct
	func unpackChannelObject() -> (NSData){
		var jsonDict : Dictionary = Dictionary();
		jsonDict["id"] = id;
		jsonDict["name"] = name;
	}



}
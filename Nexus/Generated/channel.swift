/**
 * @name: channel
 * @author: Erik E. Beerepoot
 * @brief: None provided.
 * @notes: Autogenerated! Edit at your own risk!
 */

import Foundation

 class channel {
 	var is_general : Bool? = nil;
 	var name : String? = nil;
 	var is_channel : String? = nil;
 	var created : Int? = nil;
 	var is_member : Bool? = nil;
 	var is_archived : Bool? = nil;
 	var creator : String? = nil;
 	var topic : NSMutableDictionary? = nil;
 	var unread_count : Int? = nil;
 	var purpose : NSMutableDictionary? = nil;
 	var members : NSMutableArray? = nil;
 	var last_read : String? = nil;
 	var id : String? = nil;
 	
 	func packObject(jsonData : NSData) {
 		let jsonOptional : JSON? = JSON.parse(jsonData);
 		if(jsonOptional==nil){
 			return;
 		}

 		//get our variables out of the object
 		let jsonObject : JSON = jsonOptional!;
 	 	is_general = jsonObject["is_general"].Bool;
	 	name = jsonObject["name"].String;
	 	is_channel = jsonObject["is_channel"].String;
	 	created = jsonObject["created"].Int;
	 	is_member = jsonObject["is_member"].Bool;
	 	is_archived = jsonObject["is_archived"].Bool;
	 	creator = jsonObject["creator"].String;
	 	topic = jsonObject["topic"].NSMutableDictionary;
	 	unread_count = jsonObject["unread_count"].Int;
	 	purpose = jsonObject["purpose"].NSMutableDictionary;
	 	members = jsonObject["members"].NSMutableArray;
	 	last_read = jsonObject["last_read"].String;
	 	id = jsonObject["id"].String;
	 		
 	}

 	func unpackObject() -> (NSData) {
 		var jsonDict : Dictionary = Dictionary();
	 	jsonDict["is_general"] = is_general;
	 	jsonDict["name"] = name;
	 	jsonDict["is_channel"] = is_channel;
	 	jsonDict["created"] = created;
	 	jsonDict["is_member"] = is_member;
	 	jsonDict["is_archived"] = is_archived;
	 	jsonDict["creator"] = creator;
	 	jsonDict["topic"] = topic;
	 	jsonDict["unread_count"] = unread_count;
	 	jsonDict["purpose"] = purpose;
	 	jsonDict["members"] = members;
	 	jsonDict["last_read"] = last_read;
	 	jsonDict["id"] = id;
	 		
		return NSJSONSerialization.dataWithJSONObject(jsonDict,0,nil);
 	}
 }